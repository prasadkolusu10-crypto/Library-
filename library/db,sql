CREATE DATABASE Library;
 USE Library;

CREATE TABLE Publishers (
        publisher_id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        address VARCHAR(200),
        phone VARCHAR(20),
        email VARCHAR(100),
        UNIQUE (name)
     );

      CREATE TABLE Authors (
         author_id INT AUTO_INCREMENT PRIMARY KEY,
         first_name VARCHAR(50) NOT NULL,
         last_name VARCHAR(50) NOT NULL,
         birth_date DATE,
         nationality VARCHAR(50),
         biography TEXT
     );

 CREATE TABLE Books (
         book_id INT AUTO_INCREMENT PRIMARY KEY,
         title VARCHAR(200) NOT NULL,
         isbn VARCHAR(20) UNIQUE NOT NULL,
         publication_year INT,
         edition INT,
         publisher_id INT,
         category VARCHAR(50),
         shelf_location VARCHAR(20),
         available_copies INT DEFAULT 1,
         total_copies INT DEFAULT 1,
         FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)
     );

 CREATE TABLE BookAuthors (
         book_id INT,
         author_id INT,
         PRIMARY KEY (book_id, author_id),
         FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,
         FOREIGN KEY (author_id) REFERENCES Authors(author_id) ON DELETE CASCADE
     );

 CREATE TABLE Members (
         member_id INT AUTO_INCREMENT PRIMARY KEY,
         first_name VARCHAR(50) NOT NULL,
         last_name VARCHAR(50) NOT NULL,
         email VARCHAR(100) UNIQUE NOT NULL,
         phone VARCHAR(20),
         address VARCHAR(200),
         membership_date DATE NOT NULL,
         membership_expiry DATE NOT NULL,
         status ENUM('Active', 'Expired', 'Suspended') DEFAULT 'Active'
     );

 CREATE TABLE BookLoans (
         loan_id INT AUTO_INCREMENT PRIMARY KEY,
         book_id INT NOT NULL,
         member_id INT NOT NULL,
         loan_date DATE NOT NULL,
         due_date DATE NOT NULL,
         return_date DATE,
         status ENUM('On Loan', 'Returned', 'Overdue') DEFAULT 'On Loan',
         FOREIGN KEY (book_id) REFERENCES Books(book_id),
         FOREIGN KEY (member_id) REFERENCES Members(member_id),
         CHECK (due_date > loan_date),
         CHECK (return_date IS NULL OR return_date >= loan_date)
     );